#!/bin/bash

# üîß Script de Configuration Automatique Yesod
# Ce script aide √† configurer rapidement l'environnement de d√©veloppement

set -e

echo "üöÄ Configuration de Yesod - Plateforme SaaS de Recouvrement"
echo "============================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_step() {
    echo -e "${BLUE}[√âTAPE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCC√àS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

# V√©rification des pr√©requis
print_step "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©. Veuillez l'installer depuis https://nodejs.org/"
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    print_error "Node.js version 18+ requise. Version actuelle: $(node --version)"
    exit 1
fi

print_success "Node.js $(node --version) ‚úì"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©."
    exit 1
fi

print_success "npm $(npm --version) ‚úì"

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    print_warning "Docker n'est pas install√©. Certaines fonctionnalit√©s seront limit√©es."
    DOCKER_AVAILABLE=false
else
    print_success "Docker $(docker --version | cut -d' ' -f3 | cut -d',' -f1) ‚úì"
    DOCKER_AVAILABLE=true
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
    if [ "$DOCKER_AVAILABLE" = true ]; then
        print_warning "Docker Compose n'est pas disponible."
    fi
    DOCKER_COMPOSE_AVAILABLE=false
else
    print_success "Docker Compose ‚úì"
    DOCKER_COMPOSE_AVAILABLE=true
fi

echo ""

# Installation des d√©pendances
print_step "Installation des d√©pendances npm..."
npm install
print_success "D√©pendances install√©es ‚úì"

echo ""

# Configuration des variables d'environnement
print_step "Configuration des variables d'environnement..."

if [ ! -f ".env.local" ]; then
    if [ -f ".env.example" ]; then
        cp .env.example .env.local
        print_success "Fichier .env.local cr√©√© depuis .env.example ‚úì"
    else
        print_error "Fichier .env.example non trouv√©."
        exit 1
    fi
else
    print_warning "Le fichier .env.local existe d√©j√†. Sauvegarde en .env.local.backup"
    cp .env.local .env.local.backup
fi

echo ""

# G√©n√©ration de la cl√© secr√®te NextAuth
print_step "G√©n√©ration de la cl√© secr√®te NextAuth..."

if command -v openssl &> /dev/null; then
    NEXTAUTH_SECRET=$(openssl rand -base64 32)
    
    # Remplacer la cl√© dans .env.local
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s/NEXTAUTH_SECRET=\"your-nextauth-secret-key\"/NEXTAUTH_SECRET=\"$NEXTAUTH_SECRET\"/" .env.local
    else
        # Linux
        sed -i "s/NEXTAUTH_SECRET=\"your-nextauth-secret-key\"/NEXTAUTH_SECRET=\"$NEXTAUTH_SECRET\"/" .env.local
    fi
    
    print_success "Cl√© secr√®te NextAuth g√©n√©r√©e et configur√©e ‚úì"
else
    print_warning "OpenSSL non disponible. Veuillez configurer manuellement NEXTAUTH_SECRET dans .env.local"
fi

echo ""

# Configuration de la base de donn√©es
if [ "$DOCKER_COMPOSE_AVAILABLE" = true ]; then
    print_step "Configuration de la base de donn√©es PostgreSQL..."
    
    read -p "Souhaitez-vous d√©marrer PostgreSQL avec Docker? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_step "D√©marrage de PostgreSQL avec Docker Compose..."
        docker-compose up -d postgres
        
        # Attendre que PostgreSQL soit pr√™t
        print_step "Attente du d√©marrage de PostgreSQL..."
        sleep 10
        
        print_success "PostgreSQL d√©marr√© ‚úì"
    else
        print_warning "Veuillez configurer manuellement DATABASE_URL dans .env.local"
    fi
else
    print_warning "Docker Compose non disponible. Veuillez configurer manuellement la base de donn√©es."
fi

echo ""

# Configuration de Prisma
print_step "Configuration de Prisma..."

# G√©n√©rer le client Prisma
npx prisma generate
print_success "Client Prisma g√©n√©r√© ‚úì"

# Appliquer le sch√©ma (si la base de donn√©es est disponible)
if [ "$DOCKER_COMPOSE_AVAILABLE" = true ] && [[ $REPLY =~ ^[Yy]$ ]]; then
    print_step "Application du sch√©ma de base de donn√©es..."
    
    # Attendre un peu plus pour s'assurer que PostgreSQL est compl√®tement pr√™t
    sleep 5
    
    if npx prisma db push 2>/dev/null; then
        print_success "Sch√©ma de base de donn√©es appliqu√© ‚úì"
    else
        print_warning "Erreur lors de l'application du sch√©ma. V√©rifiez la connexion √† la base de donn√©es."
    fi
fi

echo ""

# Test de la configuration
print_step "Test de la configuration..."

# V√©rifier que l'application peut d√©marrer
print_step "V√©rification du build de l'application..."
if timeout 30 npm run build 2>/dev/null; then
    print_success "Build de l'application r√©ussi ‚úì"
else
    print_warning "Le build a √©chou√© ou a pris trop de temps. V√©rifiez les erreurs manuellement."
fi

echo ""
echo "üéâ Configuration termin√©e !"
echo "=========================="
echo ""
echo "üìù Prochaines √©tapes :"
echo "1. V√©rifiez le fichier .env.local et ajustez les valeurs si n√©cessaire"
echo "2. Pour Google OAuth, configurez GOOGLE_CLIENT_ID et GOOGLE_CLIENT_SECRET"
echo "3. D√©marrez l'application avec: npm run dev"
echo "4. Acc√©dez √† http://localhost:3000"
echo ""
echo "üìö Guides disponibles :"
echo "- Configuration d√©taill√©e : CONFIGURATION_GUIDE.md"
echo "- Setup d'authentification : AUTHENTICATION_SETUP.md"
echo ""
echo "üîê Compte admin temporaire :"
echo "- Email: YAdmin"
echo "- Mot de passe: AZEqsd1234#"
echo ""

read -p "Souhaitez-vous d√©marrer l'application maintenant? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_step "D√©marrage de l'application..."
    npm run dev
fi