'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import {
  Calendar,
  Clock,
  User,
  MapPin,
  Phone,
  Video,
  Plus,
  Edit,
  Trash2,
  Bell,
  Users,
  ChevronLeft,
  ChevronRight,
  Filter,
  Search,
  MoreVertical,
  Zap,
  Sparkles,
  Target,
  AlertTriangle,
  CheckCircle,
  CalendarDays,
  MessageSquare,
  Mail,
  FileText,
  Settings,
  Download,
  ExternalLink
} from 'lucide-react'

// Types pour le calendrier intelligent
interface SmartEvent {
  id: string
  title: string
  type: 'meeting' | 'call' | 'deadline' | 'reminder' | 'hearing'
  caseId?: string
  clientName?: string
  startTime: Date
  endTime: Date
  location?: string
  description?: string
  participants: string[]
  isAutoGenerated: boolean
  priority: 'high' | 'medium' | 'low'
  status: 'scheduled' | 'completed' | 'cancelled' | 'rescheduled'
  reminders: number[] // minutes avant l'événement
  optimizationScore: number // score d'optimisation IA
}

interface TimeSlotSuggestion {
  startTime: Date
  endTime: Date
  score: number
  conflicts: string[]
  reason: string
}

interface CalendarDay {
  date: Date
  isCurrentMonth: boolean
  isToday: boolean
  events: SmartEvent[]
}

export default function SmartCalendar() {
  const [currentDate, setCurrentDate] = useState(new Date())
  const [selectedDate, setSelectedDate] = useState<Date | null>(null)
  const [viewMode, setViewMode] = useState<'month' | 'week' | 'day'>('month')
  const [filterType, setFilterType] = useState<string>('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [showSuggestions, setShowSuggestions] = useState(false)

  // Événements du calendrier
  const [events, setEvents] = useState<SmartEvent[]>([
    {
      id: '1',
      title: 'RDV Client - TECHNO SAS',
      type: 'meeting',
      caseId: '1',
      clientName: 'TECHNO SAS',
      startTime: new Date(2024, 2, 15, 14, 0),
      endTime: new Date(2024, 2, 15, 15, 30),
      location: 'Cabinet - Salle de réunion 1',
      description: 'Négociation plan de paiement échelonné',
      participants: ['contact@techno-sas.fr', 'mdupont@cabinet.fr'],
      isAutoGenerated: true,
      priority: 'high',
      status: 'scheduled',
      reminders: [60, 15],
      optimizationScore: 92
    },
    {
      id: '2',
      title: 'Appel de relance - INNOV SA',
      type: 'call',
      caseId: '2',
      clientName: 'INNOV SA',
      startTime: new Date(2024, 2, 16, 10, 30),
      endTime: new Date(2024, 2, 16, 11, 0),
      description: 'Suivi paiement partiel reçu',
      participants: ['direction@innov-sa.fr'],
      isAutoGenerated: true,
      priority: 'medium',
      status: 'scheduled',
      reminders: [30],
      optimizationScore: 78
    },
    {
      id: '3',
      title: 'Échéance mise en demeure',
      type: 'deadline',
      caseId: '3',
      clientName: 'STARTUP TECH',
      startTime: new Date(2024, 2, 18, 17, 0),
      endTime: new Date(2024, 2, 18, 17, 0),
      description: 'Fin du délai de 8 jours - Procédure judiciaire',
      participants: [],
      isAutoGenerated: true,
      priority: 'high',
      status: 'scheduled',
      reminders: [1440, 60], // 24h et 1h avant
      optimizationScore: 95
    },
    {
      id: '4',
      title: 'Audience Tribunal de Commerce',
      type: 'hearing',
      caseId: '4',
      clientName: 'BUILDER CORP',
      startTime: new Date(2024, 2, 20, 9, 0),
      endTime: new Date(2024, 2, 20, 11, 0),
      location: 'Tribunal de Commerce - Salle 3',
      description: 'Audience en référé - Injonction de payer',
      participants: ['avocat@builder-corp.fr', 'greffe@tribunal-commerce.fr'],
      isAutoGenerated: false,
      priority: 'high',
      status: 'scheduled',
      reminders: [2880, 1440, 60], // 2 jours, 1 jour, 1h avant
      optimizationScore: 100
    }
  ])

  // Suggestions de créneaux optimaux
  const [timeSuggestions, setTimeSuggestions] = useState<TimeSlotSuggestion[]>([
    {
      startTime: new Date(2024, 2, 17, 14, 0),
      endTime: new Date(2024, 2, 17, 15, 0),
      score: 95,
      conflicts: [],
      reason: 'Créneau optimal - Client disponible, pas de conflit'
    },
    {
      startTime: new Date(2024, 2, 17, 16, 0),
      endTime: new Date(2024, 2, 17, 17, 0),
      score: 87,
      conflicts: ['Réunion équipe'],
      reason: 'Bon créneau - Conflit mineur reportable'
    },
    {
      startTime: new Date(2024, 2, 18, 9, 0),
      endTime: new Date(2024, 2, 18, 10, 0),
      score: 92,
      conflicts: [],
      reason: 'Excellent créneau matinal - Haute productivité'
    }
  ])

  // Générer les jours du mois pour la vue calendrier
  const generateCalendarDays = (): CalendarDay[] => {
    const year = currentDate.getFullYear()
    const month = currentDate.getMonth()
    
    const firstDay = new Date(year, month, 1)
    const lastDay = new Date(year, month + 1, 0)
    const startDate = new Date(firstDay)
    startDate.setDate(startDate.getDate() - firstDay.getDay())
    
    const days: CalendarDay[] = []
    const currentDay = new Date(startDate)
    
    for (let i = 0; i < 42; i++) {
      const dayEvents = events.filter(event => 
        event.startTime.toDateString() === currentDay.toDateString()
      )
      
      days.push({
        date: new Date(currentDay),
        isCurrentMonth: currentDay.getMonth() === month,
        isToday: currentDay.toDateString() === new Date().toDateString(),
        events: dayEvents
      })
      
      currentDay.setDate(currentDay.getDate() + 1)
    }
    
    return days
  }

  const calendarDays = generateCalendarDays()

  // Filtrer les événements
  const filteredEvents = events.filter(event => {
    const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.clientName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         ''
    const matchesType = filterType === 'all' || event.type === filterType
    return matchesSearch && matchesType
  })

  const getEventTypeIcon = (type: string) => {
    switch (type) {
      case 'meeting': return <Users className="h-4 w-4" />
      case 'call': return <Phone className="h-4 w-4" />
      case 'deadline': return <AlertTriangle className="h-4 w-4" />
      case 'reminder': return <Bell className="h-4 w-4" />
      case 'hearing': return <FileText className="h-4 w-4" />
      default: return <Calendar className="h-4 w-4" />
    }
  }

  const getEventTypeColor = (type: string) => {
    switch (type) {
      case 'meeting': return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'call': return 'bg-green-100 text-green-800 border-green-200'
      case 'deadline': return 'bg-red-100 text-red-800 border-red-200'
      case 'reminder': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'hearing': return 'bg-purple-100 text-purple-800 border-purple-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'border-l-4 border-red-500'
      case 'medium': return 'border-l-4 border-orange-500'
      case 'low': return 'border-l-4 border-blue-500'
      default: return 'border-l-4 border-gray-500'
    }
  }

  const navigateMonth = (direction: 'prev' | 'next') => {
    const newDate = new Date(currentDate)
    if (direction === 'prev') {
      newDate.setMonth(newDate.getMonth() - 1)
    } else {
      newDate.setMonth(newDate.getMonth() + 1)
    }
    setCurrentDate(newDate)
  }

  // Générer automatiquement des événements basés sur l'IA
  const generateSmartEvents = async () => {
    // Simulation d'appel API pour générer des événements intelligents
    const newEvents: SmartEvent[] = [
      {
        id: Date.now().toString(),
        title: 'Relance automatique - ACME CORP',
        type: 'call',
        caseId: '5',
        clientName: 'ACME CORP',
        startTime: new Date(2024, 2, 19, 15, 0),
        endTime: new Date(2024, 2, 19, 15, 30),
        description: 'Appel automatique généré par IA - Facture en retard',
        participants: ['contact@acme-corp.fr'],
        isAutoGenerated: true,
        priority: 'medium',
        status: 'scheduled',
        reminders: [30],
        optimizationScore: 84
      }
    ]

    setEvents([...events, ...newEvents])
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                <Sparkles className="h-8 w-8 text-blue-600" />
                Calendrier Intelligent
              </h1>
              <p className="text-gray-600 mt-1">
                Planification automatisée avec optimisation IA
              </p>
            </div>
            <div className="flex gap-3">
              <Button
                onClick={generateSmartEvents}
                className="flex items-center gap-2"
              >
                <Zap className="h-4 w-4" />
                Générer Événements IA
              </Button>
              <Button variant="outline" className="flex items-center gap-2">
                <Plus className="h-4 w-4" />
                Nouvel Événement
              </Button>
            </div>
          </div>
        </div>

        {/* Contrôles et filtres */}
        <div className="bg-white rounded-xl shadow-sm border p-6 mb-6">
          <div className="flex flex-col lg:flex-row gap-4 items-center justify-between">
            
            {/* Navigation du calendrier */}
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => navigateMonth('prev')}
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <h2 className="text-xl font-semibold text-gray-900 min-w-[200px] text-center">
                  {currentDate.toLocaleDateString('fr-FR', { 
                    month: 'long', 
                    year: 'numeric' 
                  })}
                </h2>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => navigateMonth('next')}
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
              
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentDate(new Date())}
              >
                Aujourd&apos;hui
              </Button>
            </div>

            {/* Filtres et recherche */}
            <div className="flex items-center gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Rechercher..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 w-64"
                />
              </div>
              
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Tous types</option>
                <option value="meeting">RDV</option>
                <option value="call">Appels</option>
                <option value="deadline">Échéances</option>
                <option value="hearing">Audiences</option>
              </select>

              <div className="flex border border-gray-300 rounded-md">
                <button
                  className={`px-3 py-1 text-sm ${viewMode === 'month' ? 'bg-blue-500 text-white' : 'text-gray-600'}`}
                  onClick={() => setViewMode('month')}
                >
                  Mois
                </button>
                <button
                  className={`px-3 py-1 text-sm ${viewMode === 'week' ? 'bg-blue-500 text-white' : 'text-gray-600'}`}
                  onClick={() => setViewMode('week')}
                >
                  Semaine
                </button>
                <button
                  className={`px-3 py-1 text-sm ${viewMode === 'day' ? 'bg-blue-500 text-white' : 'text-gray-600'}`}
                  onClick={() => setViewMode('day')}
                >
                  Jour
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-4 gap-6">
          
          {/* Calendrier principal */}
          <div className="xl:col-span-3">
            <div className="bg-white rounded-xl shadow-sm border">
              
              {/* En-têtes des jours */}
              <div className="grid grid-cols-7 border-b">
                {['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'].map((day) => (
                  <div key={day} className="p-3 text-center text-sm font-medium text-gray-500">
                    {day}
                  </div>
                ))}
              </div>

              {/* Grille du calendrier */}
              <div className="grid grid-cols-7">
                {calendarDays.map((day, index) => (
                  <div
                    key={index}
                    className={`min-h-32 p-2 border-r border-b cursor-pointer hover:bg-gray-50 ${
                      !day.isCurrentMonth ? 'bg-gray-50' : ''
                    } ${day.isToday ? 'bg-blue-50' : ''}`}
                    onClick={() => setSelectedDate(day.date)}
                  >
                    <div className={`text-sm mb-2 ${
                      day.isToday ? 'font-bold text-blue-600' : 
                      !day.isCurrentMonth ? 'text-gray-400' : 'text-gray-900'
                    }`}>
                      {day.date.getDate()}
                    </div>
                    
                    <div className="space-y-1">
                      {day.events.slice(0, 3).map((event) => (
                        <div
                          key={event.id}
                          className={`text-xs p-1 rounded border ${getEventTypeColor(event.type)} ${getPriorityColor(event.priority)}`}
                        >
                          <div className="flex items-center gap-1 mb-1">
                            {getEventTypeIcon(event.type)}
                            <span className="font-medium truncate">
                              {event.title}
                            </span>
                            {event.isAutoGenerated && (
                              <Zap className="h-3 w-3 flex-shrink-0" />
                            )}
                          </div>
                          <div className="text-xs opacity-75">
                            {event.startTime.toLocaleTimeString('fr-FR', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </div>
                        </div>
                      ))}
                      {day.events.length > 3 && (
                        <div className="text-xs text-gray-500 font-medium">
                          +{day.events.length - 3} autres
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Panneau latéral */}
          <div className="xl:col-span-1 space-y-6">
            
            {/* Suggestions IA */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Target className="h-5 w-5" />
                Créneaux Optimaux IA
              </h3>
              
              <div className="space-y-3">
                {timeSuggestions.map((suggestion, index) => (
                  <div key={index} className="border rounded-lg p-3">
                    <div className="flex items-center justify-between mb-2">
                      <div className="text-sm font-medium">
                        {suggestion.startTime.toLocaleDateString('fr-FR', { 
                          weekday: 'short',
                          day: 'numeric',
                          month: 'short'
                        })}
                      </div>
                      <div className="flex items-center gap-1">
                        <span className={`text-sm font-bold ${
                          suggestion.score >= 90 ? 'text-green-600' :
                          suggestion.score >= 80 ? 'text-orange-600' : 'text-red-600'
                        }`}>
                          {suggestion.score}%
                        </span>
                        <Sparkles className="h-4 w-4 text-blue-500" />
                      </div>
                    </div>
                    
                    <div className="text-sm text-gray-600 mb-2">
                      {suggestion.startTime.toLocaleTimeString('fr-FR', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })} - {suggestion.endTime.toLocaleTimeString('fr-FR', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </div>
                    
                    <div className="text-xs text-gray-500 mb-3">
                      {suggestion.reason}
                    </div>
                    
                    {suggestion.conflicts.length > 0 && (
                      <div className="text-xs text-orange-600 mb-2">
                        Conflits: {suggestion.conflicts.join(', ')}
                      </div>
                    )}
                    
                    <Button size="sm" className="w-full">
                      Planifier
                    </Button>
                  </div>
                ))}
              </div>
            </div>

            {/* Événements du jour sélectionné */}
            {selectedDate && (
              <div className="bg-white rounded-xl shadow-sm border p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  {selectedDate.toLocaleDateString('fr-FR', { 
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long'
                  })}
                </h3>
                
                <div className="space-y-3">
                  {events
                    .filter(event => event.startTime.toDateString() === selectedDate.toDateString())
                    .map((event) => (
                      <div key={event.id} className={`border rounded-lg p-3 ${getPriorityColor(event.priority)}`}>
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex items-center gap-2">
                            {getEventTypeIcon(event.type)}
                            <span className="font-medium text-sm">{event.title}</span>
                            {event.isAutoGenerated && (
                              <Zap className="h-4 w-4 text-blue-500" />
                            )}
                          </div>
                          <Button variant="ghost" size="sm">
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </div>
                        
                        <div className="text-sm text-gray-600 space-y-1">
                          <div className="flex items-center gap-2">
                            <Clock className="h-3 w-3" />
                            {event.startTime.toLocaleTimeString('fr-FR', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })} - {event.endTime.toLocaleTimeString('fr-FR', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </div>
                          
                          {event.location && (
                            <div className="flex items-center gap-2">
                              <MapPin className="h-3 w-3" />
                              {event.location}
                            </div>
                          )}
                          
                          {event.clientName && (
                            <div className="flex items-center gap-2">
                              <User className="h-3 w-3" />
                              {event.clientName}
                            </div>
                          )}
                        </div>
                        
                        {event.description && (
                          <div className="text-xs text-gray-500 mt-2">
                            {event.description}
                          </div>
                        )}
                        
                        <div className="flex items-center justify-between mt-3">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getEventTypeColor(event.type)}`}>
                            {event.type}
                          </span>
                          
                          {event.optimizationScore && (
                            <div className="flex items-center gap-1 text-xs text-blue-600">
                              <Target className="h-3 w-3" />
                              Score: {event.optimizationScore}%
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            )}

            {/* Statistiques rapides */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Statistiques
              </h3>
              
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Événements ce mois</span>
                  <span className="font-semibold">{events.length}</span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Générés par IA</span>
                  <span className="font-semibold text-blue-600">
                    {events.filter(e => e.isAutoGenerated).length}
                  </span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Taux d&apos;optimisation</span>
                  <span className="font-semibold text-green-600">
                    {Math.round(events.reduce((acc, e) => acc + e.optimizationScore, 0) / events.length)}%
                  </span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">Priorité haute</span>
                  <span className="font-semibold text-red-600">
                    {events.filter(e => e.priority === 'high').length}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
