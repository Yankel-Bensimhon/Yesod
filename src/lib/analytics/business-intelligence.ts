/**
 * Business Intelligence & Analytics Engine
 * Phase 3 - Intelligence features
 * 
 * Tableau de bord ex√©cutif avec KPIs m√©tier avanc√©s
 * Analytics pr√©dictifs et insights business
 */

import { prisma } from '@/lib/prisma';

// Types Sentry
interface SentryInterface {
  captureException: (error: any) => void;
  addBreadcrumb: (breadcrumb: any) => void;
}

// Mock de Sentry pour les tests
const mockSentry: SentryInterface = {
  captureException: (error: any) => console.error('Mock Sentry:', error),
  addBreadcrumb: (breadcrumb: any) => console.log('Mock Sentry breadcrumb:', breadcrumb),
};

// Utilisation conditionnelle de Sentry
let Sentry: SentryInterface;
try {
  Sentry = require('@sentry/nextjs');
} catch (error) {
  Sentry = mockSentry;
}

// Types pour les KPIs et m√©triques
export interface BusinessKPIs {
  // KPIs financiers
  totalRevenue: number;
  monthlyRecurringRevenue: number;
  averageInvoiceValue: number;
  collectionRate: number; // Taux de recouvrement
  
  // KPIs op√©rationnels
  activeCases: number;
  resolvedCases: number;
  averageResolutionTime: number; // en jours
  caseSuccessRate: number;
  
  // KPIs clients
  totalClients: number;
  activeClients: number;
  clientRetentionRate: number;
  clientSatisfactionScore: number;
  
  // KPIs performance √©quipe
  casePerLawyer: number;
  revenuePerLawyer: number;
  productivityScore: number;
}

export interface TimeSeriesData {
  date: string;
  value: number;
  label?: string;
}

export interface ChartData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor?: string[];
    borderColor?: string;
    type?: 'line' | 'bar' | 'pie' | 'doughnut';
  }[];
}

export interface PredictiveInsight {
  type: 'revenue' | 'collection' | 'case_volume' | 'risk';
  prediction: number;
  confidence: number; // 0-100%
  timeframe: '1_month' | '3_months' | '6_months' | '1_year';
  factors: string[];
  recommendation: string;
}

export interface BusinessInsight {
  id: string;
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  category: 'financial' | 'operational' | 'strategic';
  actionable: boolean;
  suggestedActions: string[];
  metrics: Record<string, number>;
}

/**
 * Moteur de Business Intelligence
 * Analyse et g√©n√®re des insights m√©tier
 */
export class BusinessIntelligenceEngine {
  private static instance: BusinessIntelligenceEngine;

  public static getInstance(): BusinessIntelligenceEngine {
    if (!BusinessIntelligenceEngine.instance) {
      BusinessIntelligenceEngine.instance = new BusinessIntelligenceEngine();
    }
    return BusinessIntelligenceEngine.instance;
  }

  /**
   * Calcule tous les KPIs m√©tier principaux
   */
  async calculateBusinessKPIs(period: 'month' | 'quarter' | 'year' = 'month'): Promise<BusinessKPIs> {
    try {
      const startDate = this.getStartDate(period);
      const endDate = new Date();

      console.log(`üìä Calcul des KPIs m√©tier pour la p√©riode: ${period}`);

      // KPIs financiers
      const invoiceStats = await this.calculateFinancialKPIs(startDate, endDate);
      
      // KPIs op√©rationnels
      const caseStats = await this.calculateOperationalKPIs(startDate, endDate);
      
      // KPIs clients
      const clientStats = await this.calculateClientKPIs(startDate, endDate);
      
      // KPIs √©quipe
      const teamStats = await this.calculateTeamKPIs(startDate, endDate);

      const kpis: BusinessKPIs = {
        // Financiers
        totalRevenue: invoiceStats.totalRevenue,
        monthlyRecurringRevenue: invoiceStats.mrr,
        averageInvoiceValue: invoiceStats.averageValue,
        collectionRate: invoiceStats.collectionRate,
        
        // Op√©rationnels
        activeCases: caseStats.active,
        resolvedCases: caseStats.resolved,
        averageResolutionTime: caseStats.avgResolutionTime,
        caseSuccessRate: caseStats.successRate,
        
        // Clients
        totalClients: clientStats.total,
        activeClients: clientStats.active,
        clientRetentionRate: clientStats.retentionRate,
        clientSatisfactionScore: clientStats.satisfactionScore,
        
        // √âquipe
        casePerLawyer: teamStats.casesPerLawyer,
        revenuePerLawyer: teamStats.revenuePerLawyer,
        productivityScore: teamStats.productivityScore
      };

      console.log(`‚úÖ KPIs calcul√©s avec succ√®s`);
      return kpis;

    } catch (error) {
      console.error('‚ùå Erreur calcul KPIs:', error);
      Sentry.captureException(error);
      throw error;
    }
  }

  /**
   * G√©n√®re des donn√©es de s√©ries temporelles pour les graphiques
   */
  async generateTimeSeriesData(
    metric: 'revenue' | 'cases' | 'collection_rate', 
    period: '7d' | '30d' | '90d' | '1y'
  ): Promise<TimeSeriesData[]> {
    try {
      const days = this.getDaysFromPeriod(period);
      const data: TimeSeriesData[] = [];

      for (let i = days; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        
        let value = 0;
        switch (metric) {
          case 'revenue':
            value = await this.getRevenueForDate(date);
            break;
          case 'cases':
            value = await this.getCasesForDate(date);
            break;
          case 'collection_rate':
            value = await this.getCollectionRateForDate(date);
            break;
        }

        data.push({
          date: date.toISOString().split('T')[0],
          value,
          label: this.formatDateLabel(date, period)
        });
      }

      return data;

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration s√©ries temporelles:', error);
      Sentry.captureException(error);
      return [];
    }
  }

  /**
   * Pr√©pare les donn√©es pour les graphiques Chart.js
   */
  async prepareChartData(type: 'revenue_trend' | 'case_status' | 'client_types' | 'monthly_comparison'): Promise<ChartData> {
    try {
      switch (type) {
        case 'revenue_trend':
          return await this.generateRevenueTrendChart();
        case 'case_status':
          return await this.generateCaseStatusChart();
        case 'client_types':
          return await this.generateClientTypesChart();
        case 'monthly_comparison':
          return await this.generateMonthlyComparisonChart();
        default:
          throw new Error(`Type de graphique non support√©: ${type}`);
      }

    } catch (error) {
      console.error('‚ùå Erreur pr√©paration donn√©es graphique:', error);
      Sentry.captureException(error);
      throw error;
    }
  }

  /**
   * G√©n√®re des insights pr√©dictifs bas√©s sur l'historique
   */
  async generatePredictiveInsights(): Promise<PredictiveInsight[]> {
    try {
      console.log('üîÆ G√©n√©ration d\'insights pr√©dictifs...');

      const insights: PredictiveInsight[] = [];

      // Pr√©diction revenus
      const revenueInsight = await this.predictRevenue();
      insights.push(revenueInsight);

      // Pr√©diction taux de recouvrement
      const collectionInsight = await this.predictCollectionRate();
      insights.push(collectionInsight);

      // Pr√©diction volume de dossiers
      const volumeInsight = await this.predictCaseVolume();
      insights.push(volumeInsight);

      // Analyse des risques
      const riskInsight = await this.analyzeRisks();
      insights.push(riskInsight);

      console.log(`‚úÖ ${insights.length} insights pr√©dictifs g√©n√©r√©s`);
      return insights;

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration insights pr√©dictifs:', error);
      Sentry.captureException(error);
      return [];
    }
  }

  /**
   * G√©n√®re des insights business actionnables
   */
  async generateBusinessInsights(): Promise<BusinessInsight[]> {
    try {
      console.log('üí° G√©n√©ration d\'insights business...');

      const insights: BusinessInsight[] = [];

      // Analyse de performance financi√®re
      const financialInsight = await this.analyzeFinancialPerformance();
      if (financialInsight) insights.push(financialInsight);

      // Analyse de l'efficacit√© op√©rationnelle
      const operationalInsight = await this.analyzeOperationalEfficiency();
      if (operationalInsight) insights.push(operationalInsight);

      // Analyse de la satisfaction client
      const clientInsight = await this.analyzeClientSatisfaction();
      if (clientInsight) insights.push(clientInsight);

      // Opportunit√©s de croissance
      const growthInsight = await this.identifyGrowthOpportunities();
      if (growthInsight) insights.push(growthInsight);

      console.log(`üíº ${insights.length} insights business g√©n√©r√©s`);
      return insights;

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration insights business:', error);
      Sentry.captureException(error);
      return [];
    }
  }

  /**
   * G√©n√®re un rapport ex√©cutif complet
   */
  async generateExecutiveReport(period: 'month' | 'quarter' | 'year' = 'month'): Promise<{
    summary: BusinessKPIs;
    trends: Record<string, TimeSeriesData[]>;
    charts: Record<string, ChartData>;
    predictions: PredictiveInsight[];
    insights: BusinessInsight[];
    recommendations: string[];
  }> {
    try {
      console.log('üìã G√©n√©ration du rapport ex√©cutif...');

      const [summary, predictions, insights] = await Promise.all([
        this.calculateBusinessKPIs(period),
        this.generatePredictiveInsights(),
        this.generateBusinessInsights()
      ]);

      const trends = {
        revenue: await this.generateTimeSeriesData('revenue', '30d'),
        cases: await this.generateTimeSeriesData('cases', '30d'),
        collection: await this.generateTimeSeriesData('collection_rate', '30d')
      };

      const charts = {
        revenue_trend: await this.prepareChartData('revenue_trend'),
        case_status: await this.prepareChartData('case_status'),
        client_types: await this.prepareChartData('client_types'),
        monthly_comparison: await this.prepareChartData('monthly_comparison')
      };

      const recommendations = this.generateRecommendations(summary, insights);

      console.log('‚úÖ Rapport ex√©cutif g√©n√©r√© avec succ√®s');

      return {
        summary,
        trends,
        charts,
        predictions,
        insights,
        recommendations
      };

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration rapport ex√©cutif:', error);
      Sentry.captureException(error);
      throw error;
    }
  }

  // === M√âTHODES PRIV√âES ===

  private getStartDate(period: 'month' | 'quarter' | 'year'): Date {
    const date = new Date();
    switch (period) {
      case 'month':
        date.setMonth(date.getMonth() - 1);
        break;
      case 'quarter':
        date.setMonth(date.getMonth() - 3);
        break;
      case 'year':
        date.setFullYear(date.getFullYear() - 1);
        break;
    }
    return date;
  }

  private async calculateFinancialKPIs(startDate: Date, endDate: Date) {
    const invoices = await prisma.invoice.findMany({
      where: {
        createdAt: { gte: startDate, lte: endDate }
      },
      include: { payments: true }
    });

    const totalRevenue = invoices.reduce((sum, invoice) => {
      const paidAmount = invoice.payments?.reduce((pSum, payment) => pSum + payment.amount, 0) || 0;
      return sum + paidAmount;
    }, 0);

    const totalInvoiced = invoices.reduce((sum, invoice) => sum + invoice.total, 0);
    const collectionRate = totalInvoiced > 0 ? (totalRevenue / totalInvoiced) * 100 : 0;

    return {
      totalRevenue,
      mrr: totalRevenue / this.getMonthsDifference(startDate, endDate),
      averageValue: invoices.length > 0 ? totalInvoiced / invoices.length : 0,
      collectionRate
    };
  }

  private async calculateOperationalKPIs(startDate: Date, endDate: Date) {
    const allCases = await prisma.case.findMany({
      where: {
        createdAt: { gte: startDate, lte: endDate }
      }
    });

    const activeCases = allCases.filter(c => c.status === 'OPEN').length;
    const resolvedCases = allCases.filter(c => c.status === 'RESOLVED').length;

    const resolvedCasesWithTimes = allCases.filter(c => 
      c.status === 'RESOLVED' && c.updatedAt && c.createdAt
    );

    const avgResolutionTime = resolvedCasesWithTimes.length > 0 
      ? resolvedCasesWithTimes.reduce((sum, c) => {
          const days = Math.ceil((c.updatedAt!.getTime() - c.createdAt.getTime()) / (1000 * 60 * 60 * 24));
          return sum + days;
        }, 0) / resolvedCasesWithTimes.length
      : 0;

    const successRate = allCases.length > 0 ? (resolvedCases / allCases.length) * 100 : 0;

    return {
      active: activeCases,
      resolved: resolvedCases,
      avgResolutionTime,
      successRate
    };
  }

  private async calculateClientKPIs(startDate: Date, endDate: Date) {
    const clients = await prisma.client.findMany({
      include: {
        cases: {
          where: {
            createdAt: { gte: startDate, lte: endDate }
          }
        }
      }
    });

    const activeClients = clients.filter(c => c.cases.some(cs => cs.status === 'OPEN')).length;

    return {
      total: clients.length,
      active: activeClients,
      retentionRate: 85, // Mock - √† calculer avec donn√©es historiques
      satisfactionScore: 4.2 // Mock - √† int√©grer avec syst√®me d'√©valuation
    };
  }

  private async calculateTeamKPIs(startDate: Date, endDate: Date) {
    // Mock data - √† remplacer par vraie gestion d'√©quipe
    const lawyersCount = 3;
    const totalCases = await prisma.case.count({
      where: {
        createdAt: { gte: startDate, lte: endDate }
      }
    });

    const totalRevenue = 50000; // √Ä calculer r√©ellement

    return {
      casesPerLawyer: lawyersCount > 0 ? totalCases / lawyersCount : 0,
      revenuePerLawyer: lawyersCount > 0 ? totalRevenue / lawyersCount : 0,
      productivityScore: 78 // Mock - √† calculer avec m√©triques r√©elles
    };
  }

  private getDaysFromPeriod(period: '7d' | '30d' | '90d' | '1y'): number {
    switch (period) {
      case '7d': return 7;
      case '30d': return 30;
      case '90d': return 90;
      case '1y': return 365;
      default: return 30;
    }
  }

  private async getRevenueForDate(date: Date): Promise<number> {
    // Simulation - √† remplacer par vraie requ√™te
    return Math.random() * 1000 + 500;
  }

  private async getCasesForDate(date: Date): Promise<number> {
    const count = await prisma.case.count({
      where: {
        createdAt: {
          gte: new Date(date.getFullYear(), date.getMonth(), date.getDate()),
          lt: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1)
        }
      }
    });
    return count;
  }

  private async getCollectionRateForDate(date: Date): Promise<number> {
    // Simulation - √† calculer r√©ellement
    return Math.random() * 20 + 70; // Entre 70% et 90%
  }

  private formatDateLabel(date: Date, period: string): string {
    if (period === '7d') {
      return date.toLocaleDateString('fr-FR', { weekday: 'short' });
    }
    return date.toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit' });
  }

  private async generateRevenueTrendChart(): Promise<ChartData> {
    const data = await this.generateTimeSeriesData('revenue', '30d');
    
    return {
      labels: data.map(d => d.label || ''),
      datasets: [{
        label: 'Revenus (‚Ç¨)',
        data: data.map(d => d.value),
        borderColor: '#3B82F6',
        backgroundColor: ['rgba(59, 130, 246, 0.1)'],
        type: 'line'
      }]
    };
  }

  private async generateCaseStatusChart(): Promise<ChartData> {
    const cases = await prisma.case.groupBy({
      by: ['status'],
      _count: true
    });

    return {
      labels: cases.map(c => c.status),
      datasets: [{
        label: 'Nombre de dossiers',
        data: cases.map(c => c._count),
        backgroundColor: ['#10B981', '#F59E0B', '#EF4444', '#6B7280']
      }]
    };
  }

  private async generateClientTypesChart(): Promise<ChartData> {
    // Mock data - √† adapter selon la vraie classification
    return {
      labels: ['Entreprises', 'Particuliers', 'Administrations', 'Associations'],
      datasets: [{
        label: 'R√©partition clients',
        data: [45, 35, 15, 5],
        backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#8B5CF6']
      }]
    };
  }

  private async generateMonthlyComparisonChart(): Promise<ChartData> {
    const months = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Jun'];
    
    return {
      labels: months,
      datasets: [
        {
          label: 'Revenus 2025',
          data: [12000, 15000, 18000, 14000, 16000, 20000],
          backgroundColor: ['#3B82F6']
        },
        {
          label: 'Revenus 2024',
          data: [10000, 12000, 15000, 13000, 14000, 17000],
          backgroundColor: ['#6B7280']
        }
      ]
    };
  }

  private async predictRevenue(): Promise<PredictiveInsight> {
    // Algorithme pr√©dictif simple - √† enrichir avec ML
    const historicalRevenue = 18000; // Mock
    const growthRate = 0.05; // 5% de croissance
    
    return {
      type: 'revenue',
      prediction: historicalRevenue * (1 + growthRate),
      confidence: 78,
      timeframe: '1_month',
      factors: ['Croissance historique', 'Nouveaux clients', 'Saisonnalit√©'],
      recommendation: 'Augmentation attendue de 5%. Intensifier prospection.'
    };
  }

  private async predictCollectionRate(): Promise<PredictiveInsight> {
    return {
      type: 'collection',
      prediction: 82.5,
      confidence: 85,
      timeframe: '3_months',
      factors: ['Am√©lioration processus', 'Automatisation', 'Formation √©quipe'],
      recommendation: 'Taux stable. Maintenir les bonnes pratiques.'
    };
  }

  private async predictCaseVolume(): Promise<PredictiveInsight> {
    return {
      type: 'case_volume',
      prediction: 45,
      confidence: 72,
      timeframe: '1_month',
      factors: ['Tendance √©conomique', 'Partenariats', 'Marketing'],
      recommendation: 'Volume en hausse. Pr√©voir ressources suppl√©mentaires.'
    };
  }

  private async analyzeRisks(): Promise<PredictiveInsight> {
    return {
      type: 'risk',
      prediction: 15,
      confidence: 90,
      timeframe: '6_months',
      factors: ['Concentration client', 'Retards paiement', 'Concurrence'],
      recommendation: 'Risque mod√©r√©. Diversifier portefeuille clients.'
    };
  }

  private async analyzeFinancialPerformance(): Promise<BusinessInsight | null> {
    const kpis = await this.calculateBusinessKPIs('month');
    
    if (kpis.collectionRate < 75) {
      return {
        id: 'financial_performance_001',
        title: 'Taux de recouvrement en baisse',
        description: `Le taux de recouvrement est de ${kpis.collectionRate.toFixed(1)}%, en dessous du seuil optimal de 80%.`,
        impact: 'high',
        category: 'financial',
        actionable: true,
        suggestedActions: [
          'Analyser les dossiers en retard',
          'Automatiser les relances',
          'Former l\'√©quipe aux techniques de n√©gociation',
          'R√©viser la strat√©gie de recouvrement'
        ],
        metrics: {
          current_rate: kpis.collectionRate,
          target_rate: 80,
          gap: 80 - kpis.collectionRate
        }
      };
    }
    
    return null;
  }

  private async analyzeOperationalEfficiency(): Promise<BusinessInsight | null> {
    const kpis = await this.calculateBusinessKPIs('month');
    
    if (kpis.averageResolutionTime > 60) {
      return {
        id: 'operational_efficiency_001',
        title: 'D√©lai de r√©solution √©lev√©',
        description: `Le d√©lai moyen de r√©solution est de ${kpis.averageResolutionTime.toFixed(0)} jours, sup√©rieur √† l'objectif de 45 jours.`,
        impact: 'medium',
        category: 'operational',
        actionable: true,
        suggestedActions: [
          'Identifier les goulots d\'√©tranglement',
          'Automatiser les t√¢ches r√©p√©titives',
          'Optimiser les processus',
          'Renforcer l\'√©quipe si n√©cessaire'
        ],
        metrics: {
          current_time: kpis.averageResolutionTime,
          target_time: 45,
          improvement_needed: kpis.averageResolutionTime - 45
        }
      };
    }
    
    return null;
  }

  private async analyzeClientSatisfaction(): Promise<BusinessInsight | null> {
    const kpis = await this.calculateBusinessKPIs('month');
    
    if (kpis.clientSatisfactionScore < 4.0) {
      return {
        id: 'client_satisfaction_001',
        title: 'Satisfaction client √† am√©liorer',
        description: `Score de satisfaction de ${kpis.clientSatisfactionScore}/5, en dessous de l'objectif de 4.5.`,
        impact: 'medium',
        category: 'strategic',
        actionable: true,
        suggestedActions: [
          'Enqu√™te de satisfaction d√©taill√©e',
          'Am√©liorer la communication client',
          'Formation service client',
          'Impl√©menter feedback continu'
        ],
        metrics: {
          current_score: kpis.clientSatisfactionScore,
          target_score: 4.5,
          improvement_needed: 4.5 - kpis.clientSatisfactionScore
        }
      };
    }
    
    return null;
  }

  private async identifyGrowthOpportunities(): Promise<BusinessInsight | null> {
    const kpis = await this.calculateBusinessKPIs('month');
    
    if (kpis.clientRetentionRate > 90) {
      return {
        id: 'growth_opportunity_001',
        title: 'Opportunit√© d\'expansion',
        description: `Excellent taux de r√©tention de ${kpis.clientRetentionRate}%. Opportunit√© d'upselling et r√©f√©rencement.`,
        impact: 'high',
        category: 'strategic',
        actionable: true,
        suggestedActions: [
          'Programme de r√©f√©rencement client',
          'D√©velopper services premium',
          'Expansion g√©ographique',
          'Partenariats strat√©giques'
        ],
        metrics: {
          retention_rate: kpis.clientRetentionRate,
          growth_potential: 25,
          revenue_opportunity: kpis.totalRevenue * 0.3
        }
      };
    }
    
    return null;
  }

  private generateRecommendations(kpis: BusinessKPIs, insights: BusinessInsight[]): string[] {
    const recommendations: string[] = [];

    // Recommandations bas√©es sur les KPIs
    if (kpis.collectionRate < 80) {
      recommendations.push('Priorit√© : Am√©liorer le taux de recouvrement avec automatisation des relances');
    }

    if (kpis.averageResolutionTime > 45) {
      recommendations.push('Optimiser les processus pour r√©duire le d√©lai de r√©solution');
    }

    if (kpis.clientRetentionRate > 85) {
      recommendations.push('Capitaliser sur la satisfaction client pour d√©velopper les r√©f√©rencements');
    }

    // Recommandations des insights
    insights.forEach(insight => {
      if (insight.impact === 'high' && insight.actionable) {
        recommendations.push(`Action prioritaire : ${insight.suggestedActions[0]}`);
      }
    });

    return recommendations;
  }

  private getMonthsDifference(startDate: Date, endDate: Date): number {
    const months = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
                   (endDate.getMonth() - startDate.getMonth());
    return Math.max(1, months);
  }
}

export default BusinessIntelligenceEngine;
