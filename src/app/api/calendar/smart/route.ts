import { NextRequest, NextResponse } from 'next/server'
import SmartCalendar, { TaskAutomationManager } from '@/lib/smart-calendar'

// GET /api/calendar/events/generate/:caseId - Génération d'événements automatiques
export async function GET(
  request: NextRequest,
  { params }: { params: { caseId: string } }
) {
  try {
    // Simulation de session pour la démo
    const session = { user: { role: 'LAWYER' } }
    
    if (!session || session.user.role !== 'LAWYER') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { caseId } = params
    
    if (!caseId) {
      return NextResponse.json({ error: 'Case ID required' }, { status: 400 })
    }

    const events = await SmartCalendar.generateAutomatedEvents(caseId)
    
    return NextResponse.json({
      success: true,
      events: events.map(event => ({
        id: event.id,
        title: event.title,
        description: event.description,
        type: event.type,
        startTime: event.startTime,
        endTime: event.endTime,
        priority: event.priority,
        autoGenerated: event.autoGenerated
      }))
    })
  } catch (error) {
    console.error('Error generating calendar events:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// POST /api/calendar/availability - Suggestion de créneaux optimaux
export async function POST(request: NextRequest) {
  try {
    // Simulation de session pour la démo
    const session = { user: { role: 'LAWYER' } }
    
    if (!session || session.user.role !== 'LAWYER') {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { 
      duration = 60, 
      preferredTimeRange = { start: '09:00', end: '18:00' },
      excludeDays = ['saturday', 'sunday'],
      lookAheadDays = 30 
    } = await request.json()

    const suggestions = await SmartCalendar.suggestOptimalSlots(
      duration,
      preferredTimeRange,
      excludeDays,
      lookAheadDays
    )
    
    return NextResponse.json({
      success: true,
      suggestions: suggestions.slice(0, 10), // Limiter à 10 suggestions
      totalFound: suggestions.length
    })
  } catch (error) {
    console.error('Error suggesting optimal slots:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
