// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Business fields
  company       String?
  phone         String?
  address       String?
  
  // Relations
  cases         Case[]
  messages      Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Case {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      CaseStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Case details
  debtorName     String
  debtorEmail    String?
  debtorPhone    String?
  debtorAddress  String?
  amount         Float
  currency       String    @default("EUR")
  dueDate        DateTime?
  invoiceNumber  String?

  // Relations
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions    CaseAction[]
  documents  Document[]
  messages   Message[]

  @@map("cases")
}

model CaseAction {
  id          String         @id @default(cuid())
  type        CaseActionType
  title       String
  description String?
  status      ActionStatus   @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_actions")
}

model Document {
  id        String       @id @default(cuid())
  title     String
  filename  String
  type      DocumentType
  url       String
  size      Int?
  mimeType  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum UserRole {
  CLIENT
  LAWYER
  ADMIN
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum CaseActionType {
  REMINDER
  FORMAL_NOTICE
  LEGAL_ACTION
  PAYMENT_PLAN
  SETTLEMENT
  COURT_PROCEEDING
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentType {
  INVOICE
  CONTRACT
  FORMAL_NOTICE
  COURT_DOCUMENT
  PAYMENT_PROOF
  CORRESPONDENCE
  OTHER
}

enum MessageType {
  TEXT
  SYSTEM
  NOTIFICATION
}