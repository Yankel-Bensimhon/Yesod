name: 🚀 Yesod CRM - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'

jobs:
  # Job 1: Tests et Qualité
  quality:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: yesod
          POSTGRES_PASSWORD: yesod_password
          POSTGRES_DB: yesod_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Generate Prisma Client
        run: npx prisma generate

      - name: 🗄️ Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://yesod:yesod_password@localhost:5432/yesod_test

      - name: 🧪 Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://yesod:yesod_password@localhost:5432/yesod_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-ci

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: yesod-crm-coverage

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔧 Check TypeScript
        run: npx tsc --noEmit

  # Job 2: Build de production
  build:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Generate Prisma Client
        run: npx prisma generate

      - name: 🏭 Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: dummy-secret

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            !.next/cache/
          retention-days: 7

  # Job 3: Sécurité et audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level=high

      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 4: Déploiement preview (branches feature)
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 5: Déploiement production (branche main)
  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [quality, build, security]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://yesod-crm.vercel.app

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 📊 Notify Sentry of deployment
        uses: getsentry/action-release@v1
        if: env.SENTRY_AUTH_TOKEN != ''
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production

  # Job 6: Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 📧 Notify success
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Yesod CRM déployé avec succès en production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Notify failure
        if: needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Échec du déploiement Yesod CRM en production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
